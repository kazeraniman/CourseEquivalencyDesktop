// <auto-generated />
using System;
using CourseEquivalencyDesktop.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseEquivalencyDesktop.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20240913174744_StudyPlanExportNewlyNeededFields")]
    partial class StudyPlanExportNewlyNeededFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.CourseEquivalency", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquivalentCourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "EquivalentCourseId");

                    b.HasIndex("EquivalentCourseId");

                    b.ToTable("Equivalencies");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpectedGraduationYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(2025);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Stream")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.StudyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Academic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationUniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExchangeEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExchangeStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastCompletedAcademicTerm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seasonal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationUniversityId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Canada");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("CourseStudyPlan", b =>
                {
                    b.Property<int>("HomeUniversityCoursesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeUniversityCoursesStudyPlansId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HomeUniversityCoursesId", "HomeUniversityCoursesStudyPlansId");

                    b.HasIndex("HomeUniversityCoursesStudyPlansId");

                    b.ToTable("CourseStudyPlan");
                });

            modelBuilder.Entity("CourseStudyPlan1", b =>
                {
                    b.Property<int>("DestinationUniversityCoursesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinationUniversityCoursesStudyPlansId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DestinationUniversityCoursesId", "DestinationUniversityCoursesStudyPlansId");

                    b.HasIndex("DestinationUniversityCoursesStudyPlansId");

                    b.ToTable("CourseStudyPlan1");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.Course", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.University", "University")
                        .WithMany("Courses")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.CourseEquivalency", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseEquivalencyDesktop.Models.Course", "EquivalentCourse")
                        .WithMany()
                        .HasForeignKey("EquivalentCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EquivalentCourse");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.Student", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.StudyPlan", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.University", "DestinationUniversity")
                        .WithMany("StudyPlans")
                        .HasForeignKey("DestinationUniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseEquivalencyDesktop.Models.Student", "Student")
                        .WithMany("StudyPlans")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationUniversity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseStudyPlan", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("HomeUniversityCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseEquivalencyDesktop.Models.StudyPlan", null)
                        .WithMany()
                        .HasForeignKey("HomeUniversityCoursesStudyPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudyPlan1", b =>
                {
                    b.HasOne("CourseEquivalencyDesktop.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("DestinationUniversityCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseEquivalencyDesktop.Models.StudyPlan", null)
                        .WithMany()
                        .HasForeignKey("DestinationUniversityCoursesStudyPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.Student", b =>
                {
                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("CourseEquivalencyDesktop.Models.University", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");

                    b.Navigation("StudyPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
